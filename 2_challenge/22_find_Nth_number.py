# -*- coding: UTF-8 -*-
# description: 假如有一组字符串符合如下规律：
#                                     S1 = 1
#                                     S2 = 12
#                                     S3 = 123
#                                     .........
#                                     S9 = 123456789
#                                     S10 = 1234567898
#                                     S11 = 12345678987
#                                     ............
#                                     S17 = 12345678987654321
#                                     S18 = 123456789876543212
#                                     ..................
#              对于Sn来说，长度为n，每个串从1开始，增长到9再降到1，再从1开始增长，不包含0。
#              现在把所有的字符串拼接起来，组成一个无限长的字符串：
#                                     S = 1121231234.......123456789876543212345678987.......
#              现在要求找出该字符串的第n位数字.
#
# example: input:6                     (一个整数(长度小于20位),表示所求的位数是多少位)
#          output:3                    (一个整数，表示该位上的数字是多少)


"""
@param string line 为单行测试数据
@return string 处理后的结果
"""
import math


def solution(line):
    N = int(line)
    n = (math.sqrt(8 * N + 1) - 1) // 2
    diff = N - (n * n + n) / 2  # 意味着与Sn最后一个元素的距离

    tmp = n % 16 if diff == 0 else diff % 16
    # 如果距离等于0，说明在Sn上，否则距离就是大于0，在Sn+1上。
    # 从1到9再到2，形成一个周期，故以16的长度作为一个周期，注意9和1都只是出现一次。
    # tmp意味着在一个周期中排第几，从0取到15。
    if tmp == 0:  # 注意当余数tmp为0时，它实质上是排在一个周期的最后面，即这个周期的16位置
        tmp = 16
    res = tmp if tmp <= 9 else 18 - tmp  # 小于9返回tmp,大于9返回9-(tmp-9)=18-tmp,实质上分别是直线y=x和y=-x+18
    return str(int(res))


test1 = '20'
print(solution(test1))  # 输出5

test2 = '3123123'
print(solution(test2))   # 输出2
